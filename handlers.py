import asyncio
import datetime
import time

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
import requests
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from bot import bot
from config import CHANEL_ID, ADMIN_IDS, KEY_EXCHANGERATE, DELTA
from db.utils import Database
from encar_pars import encar_pars, encar_filter
from image_creator import image_all
from json_maker import json_maker
from kbchachacha_pars import kbchachacha_pars
from kcar_pars import kcar_pars
from translator import trans
from vk import vk_post

router = Router()

class CreateAutoposting(StatesGroup):
    waiting_name = State()
    waiting_url = State()
    waiting_interval = State()


async def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏"),
        types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


async def send_media(text):
    while True:
        try:
            media = []
            for i in range(1, 9):
                if i != 8:
                    media.append(types.InputMediaPhoto(type='photo',
                                                       media=types.FSInputFile(f'pics/{i}.jpg')))
                else:
                    media.append(types.InputMediaPhoto(type='photo',
                                                       media=types.FSInputFile(f'pics/{i}.jpg'),
                                                       caption=text))
            await bot.send_media_group(CHANEL_ID, media)
            time.sleep(3)
            break
        except:
            await asyncio.sleep(1)


async def create_text(car_list):
    model = car_list[0]
    year = car_list[1]
    km = ''
    km_ = car_list[2]
    for k in km_:
        if k.isdigit():
            km += k
    if len(km) > 3:
        km = km[:-3] + ' ' + km[-3:]
    price_usd = car_list[3]
    if len(price_usd) > 3:
        price_usd = price_usd[:-3] + ' ' + price_usd[-3:]
    text =f"""
–î–æ—Å—Ç—É–ø–µ–Ω –∫ –∑–∞–∫–∞–∑—É –∏–∑ üá∞üá∑
{model}
{year} –≥–æ–¥
{km} –∫–º
–ë–µ–∑ –¥—Ç–ø –∏ –æ–∫—Ä–∞—Å–æ–≤
–¶–µ–Ω–∞ –≤ –ö–æ—Ä–µ–µ {price_usd} $
–í–æ–∑–º–æ–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –†–§ üá∑üá∫

üí≠ 89033635817, –ú–∏—Ö–∞–∏–ª üü¢
"""
    return text


async def scheduler():
    while True:
        flag = False
        autoposts = await Database.get_autoposts()
        time = int(datetime.datetime.now().hour) + DELTA
        for post in autoposts:
            res_bd_links = post.links.split()
            print(res_bd_links)
            interval = post.interval.split()
            for time_post in interval:
                if time == int(time_post):
                    flag = True
                    try:
                        res_links = await encar_filter(post.url)
                        for link in res_links:
                            print(link)
                            if link not in res_bd_links:
                                try:
                                    res_bd_links.append(link)
                                    if 'encar' in link:
                                        car_list = await encar_pars(link)
                                    elif 'kcar' in link:
                                        car_list = await kcar_pars(link)
                                    elif 'kbchachacha' in link:
                                        car_list = await kbchachacha_pars(link)
                                    text = await create_text(car_list)
                                    json_maker(car_list, text)
                                    image_all()
                                    await send_media(text)
                                    await vk_post(text)
                                except Exception as e:
                                    print(e)
                                    await bot.send_message(1012882762, str(e))
                                    await bot.send_message(1012882762, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞')
                                new_links = ' '.join(res_bd_links)
                                print(new_links)
                                await Database.update_links(
                                    post_id=post.id,
                                    new_links=new_links
                                )
                                break
                    except Exception as e:
                        await bot.send_message(1012882762, str(e))
                        await bot.send_message(1012882762, '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É')
        if flag:
            timedelta = (60 - int(datetime.datetime.now().minute)) * 60
            print(timedelta)
            await asyncio.sleep(timedelta)
        else:
            await asyncio.sleep(60)


@router.message(Command("start"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤!",
        reply_markup=await main_menu()
    )


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", F.from_user.id.in_(ADMIN_IDS))
async def create_autoposting(message: types.Message, state: FSMContext):
    await state.set_state(CreateAutoposting.waiting_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä BMW):")


@router.message(CreateAutoposting.waiting_name, F.from_user.id.in_(ADMIN_IDS))
async def process_url(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(CreateAutoposting.waiting_url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (—Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å—Ç—Ä)")


@router.message(CreateAutoposting.waiting_url, F.from_user.id.in_(ADMIN_IDS))
async def process_url(message: types.Message, state: FSMContext):
    await state.update_data(url=message.text)
    await state.set_state(CreateAutoposting.waiting_interval)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ –º—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n(–ù–∞–ø—Ä–∏–º–µ—Ä 9 12 21)")


@router.message(CreateAutoposting.waiting_interval, F.from_user.id.in_(ADMIN_IDS))
async def process_interval(message: types.Message, state: FSMContext):
    try:
        interval_lst = message.text.split()
        print(interval_lst)
        interval = []
        for item in interval_lst:
            flag = int(item)
            interval.append(str(item))
        interval = ' '.join(interval)
    except:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 23 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return

    data = await state.get_data()
    await Database.create_autopost(
        name=data['name'],
        url=data['url'],
        interval=interval
    )
    await message.answer("‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=await main_menu())
    await state.clear()


@router.message(F.text == "üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏", F.from_user.id.in_(ADMIN_IDS))
async def show_autopostings(message: types.Message):
    autoposts = await Database.get_autoposts()

    if not autoposts:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤")
        return

    builder = InlineKeyboardBuilder()
    for post in autoposts:
        status = "‚úÖ" if post.is_active else "‚ùå"
        builder.row(
            types.InlineKeyboardButton(
                text=f"{status} {post.id} - {post.name}",
                callback_data=f"toggle_{post.id}"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{post.id}"
            )
        )

    await message.answer(
        "üìÇ –í–∞—à–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∏:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("toggle_"), F.from_user.id.in_(ADMIN_IDS))
async def toggle_autoposting(callback: types.CallbackQuery):
    post_id = int(callback.data.split("_")[1])
    success = await Database.toggle_autopost(post_id)

    if success:
        autoposts = await Database.get_autoposts()
        builder = InlineKeyboardBuilder()
        for post in autoposts:
            status = "‚úÖ" if post.is_active else "‚ùå"
            builder.row(
                types.InlineKeyboardButton(
                    text=f"{status} {post.id} - {post.name}",
                    callback_data=f"toggle_{post.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{post.id}"
                )
            )
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data.startswith("delete_"), F.from_user.id.in_(ADMIN_IDS))
async def delete_autoposting(callback: types.CallbackQuery):
    post_id = int(callback.data.split("_")[1])
    success = await Database.delete_autopost(post_id)

    if success:
        autoposts = await Database.get_autoposts()
        if not autoposts:
            await callback.message.delete()
            await callback.answer("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω!")
            return

        builder = InlineKeyboardBuilder()
        for post in autoposts:
            status = "‚úÖ" if post.is_active else "‚ùå"
            builder.row(
                types.InlineKeyboardButton(
                    text=f"{status} {post.id} - {post.name}",
                    callback_data=f"toggle_{post.id}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_{post.id}"
                )
            )
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥")

@router.message(F.text, F.from_user.id.in_(ADMIN_IDS))
async def parsing(message: types.Message):
    await message.answer('–ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏...')
    try:
        link = message.text
        if 'encar' in link:
            car_list = await encar_pars(link)
        elif 'kcar' in link:
            car_list = await kcar_pars(link)
        elif 'kbchachacha' in link:
            car_list = await kbchachacha_pars(link)
        text = await create_text(car_list)
        json_maker(car_list, text)
        image_all()
        media = []
        for i in range(1, 9):
            if i != 8:
                media.append(types.InputMediaPhoto(type='photo', media=types.FSInputFile(f'pics/{i}.jpg')))
            else:
                media.append(types.InputMediaPhoto(type='photo', media=types.FSInputFile(f'pics/{i}.jpg'), caption=text))
        await bot.send_media_group(CHANEL_ID, media)
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¢–ì')
        try:
            await vk_post(text)
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö')
        except Exception:
            pass
    except Exception as e:
        print(e)
        await bot.send_message(1012882762, str(e))
        await message.answer(
"""
–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:
1. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –µ–µ –∏ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
2. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
""")
